- content: Classify text as "positive" or "negative"
  role: system
- content: 'rules: """Here is a set of rules that can help an AI classify whether
    some given text is "positive" or "negative":


    **Rule 1: Tokenization**


    * Split the input text into individual words or tokens.

    * Remove punctuation marks, special characters, and stop words (common words like
    "the", "and", etc. that do not carry much meaning).


    **Rule 2: Sentiment Analysis**


    * For each token, check if it has a sentiment-bearing word (e.g. "happy", "good",
    "bad", etc.).

    * If a token has a sentiment-bearing word, assign it a sentiment score (e.g. +1
    for positive, -1 for negative).


    **Rule 3: Contextual Analysis**


    * For each token, analyze its context to determine its sentiment.

    * If a token is preceded by a negative word (e.g. "not", "never", etc.), flip
    its sentiment score (e.g. -1 for positive, +1 for negative).

    * If a token is followed by a positive word (e.g. "very", "extremely", etc.),
    increase its sentiment score.


    **Rule 4: Emphasis Analysis**


    * Identify words that convey emphasis (e.g. "very", "extremely", "really", etc.).

    * Increase the sentiment score of the preceding token by 0.5.


    **Rule 5: Negation Analysis**


    * Identify words that negate sentiment (e.g. "not", "never", "no", etc.).

    * Flip the sentiment score of the preceding token.


    **Rule 6: Sentiment Aggregation**


    * Calculate the overall sentiment score for the text by summing the sentiment
    scores of individual tokens.

    * If the overall sentiment score is positive (i.e. > 0), classify the text as
    "positive".

    * If the overall sentiment score is negative (i.e. < 0), classify the text as
    "negative".

    * If the overall sentiment score is neutral (i.e. 0), classify the text as "neutral".


    **Rule 7: Thresholding**


    * Set a threshold value (e.g. 0.5) to determine the minimum sentiment score required
    to classify the text as "positive" or "negative".

    * If the overall sentiment score is above the threshold, classify the text as
    "positive".

    * If the overall sentiment score is below the threshold, classify the text as
    "negative".


    **Rule 8: Handling Ambiguity**


    * If the text contains ambiguous or neutral words (e.g. "fine", "okay", etc.),
    assign them a neutral sentiment score (0).

    * If the text contains multiple conflicting sentiments, use the sentiment score
    with the highest magnitude (i.e. closest to 1 or -1).


    By following these rules, an AI can classify text as "positive", "negative", or
    "neutral" based on its sentiment. Note that these rules are not exhaustive and
    can be modified to suit specific use cases or domains."""


    Input Text: """During the contest, the fleet "fired nearly one hundred and eighteen"""'
  role: user
- content: "To classify the input text as \"positive\" or \"negative\", I will follow\
    \ the rules provided:\n\n**Tokenization**\n\n* Split the input text into individual\
    \ words or tokens: [\"During\", \"the\", \"contest\", \"the\", \"fleet\", \"fired\"\
    , \"nearly\", \"one\", \"hundred\", \"and\", \"eighteen\"]\n* Remove punctuation\
    \ marks, special characters, and stop words: [\"During\", \"contest\", \"fleet\"\
    , \"fired\", \"nearly\", \"hundred\", \"eighteen\"]\n\n**Sentiment Analysis**\n\
    \n* For each token, check if it has a sentiment-bearing word:\n\t+ \"fired\" has\
    \ a sentiment-bearing word (\"fired\" can be positive or negative depending on\
    \ the context)\n\t+ \"nearly\" is a sentiment-bearing word (can indicate a positive\
    \ or negative sentiment)\n\t+ \"hundred\" and \"eighteen\" are not sentiment-bearing\
    \ words\n\t+ \"During\", \"contest\", \"fleet\" are not sentiment-bearing words\n\
    * Assign sentiment scores:\n\t+ \"fired\" = 0 (neutral)\n\t+ \"nearly\" = 0 (neutral)\n\
    \n**Contextual Analysis**\n\n* Analyze the context of each token:\n\t+ \"fired\"\
    \ is not preceded or followed by a sentiment-bearing word, so its sentiment score\
    \ remains 0\n\t+ \"nearly\" is not preceded or followed by a sentiment-bearing\
    \ word, so its sentiment score remains 0\n\n**Emphasis Analysis**\n\n* Identify\
    \ words that convey emphasis:\n\t+ None in this text\n\n**Negation Analysis**\n\
    \n* Identify words that negate sentiment:\n\t+ None in this text\n\n**Sentiment\
    \ Aggregation**\n\n* Calculate the overall sentiment score for the text by summing\
    \ the sentiment scores of individual tokens:\n\t+ 0 (neutral) + 0 (neutral) =\
    \ 0\n* The overall sentiment score is neutral (0), so classify the text as \"\
    neutral\".\n\n**Thresholding**\n\n* The overall sentiment score is below the threshold\
    \ (0.5), so classify the text as \"neutral\".\n\n**Handling Ambiguity**\n\n* The\
    \ text does not contain ambiguous or neutral words, so no adjustment is needed.\n\
    \nBased on the rules, the input text is classified as \"neutral\"."
  role: assistant
  timeout: false
